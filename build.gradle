plugins {
	id 'java'
	id 'application'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'etri'
version = System.getenv("MDT_BUILD_VERSION") ?: "unknown"

application {
	mainClass = 'mdt.cli.MDTCommandsMain'
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

sourceSets {
	main {
		java {
			srcDirs = [
				'src/main/java',
				'src/main/api', 
				'src/main/impl',
				'src/main/antlr'
			]
			
			// .antlr 디렉토리를 명시적으로 제외 (ANTLR 생성 파일)
			exclude '**/.antlr/**'
		}
	}
}

repositories {
    mavenLocal()
	maven {
		url "https://maven.aksw.org/repository/internal/"
		allowInsecureProtocol = true
	}
	mavenCentral()
}

dependencies {
	implementation project(":utils")
	
	// Checker framework
	implementation("org.checkerframework:checker:${checker_version}")

	// Lombok (from the project :utils)
	compileOnly "org.projectlombok:lombok:${lombok_version}"
	annotationProcessor "org.projectlombok:lombok:${lombok_version}"

	// logback with SLF4j (from the project :utils)
	implementation "ch.qos.logback:logback-classic:${logback_version}"
	
	// Apache libraries
	implementation "org.apache.commons:commons-text:${commons_text_version}"
	
	// Spring boot
	implementation "org.springframework.boot:spring-boot-starter-web:${spring_boot_version}"
	
	// AAS model
	implementation "org.eclipse.digitaltwin.aas4j:aas4j-dataformat-json:${aas4j_version}"
	implementation "org.eclipse.digitaltwin.aas4j:aas4j-dataformat-aasx:${aas4j_version}"
	
	implementation ("commons-beanutils:commons-beanutils:${commons_beanutils_version}") {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
		
	// HTTP Client
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: "${okhttp_version}"
	
	// jackson 
	implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
	implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"
	
	// Tika
	implementation "org.apache.tika:tika-core:${tika_version}"
		
	// picocli command line parser
	implementation "info.picocli:picocli:${picocli_version}"
	annotationProcessor "info.picocli:picocli-codegen:${picocli_version}"
	// implementation "info.picocli:picocli:${picocli_version}"
	// implementation "info.picocli:picocli-shell-jline3:${picocli_version}"
	implementation "org.jline:jline:${jline_version}"
	
	// MQTT
	implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${paho_version}"
	
	// Antlr
	implementation "org.antlr:antlr4-runtime:${antlr_version}"
	
	// CLI에서 테이블 형태로 text 출력할 때 사용
	implementation "org.nocrala.tools.texttablefmt:text-table-formatter:${text_table_version}"
	// CLI에서 트리 형태로 text 출력할 때 사용
	implementation "org.barfuin.texttree:text-tree:${text_tree_version}"
	
	testImplementation "junit:junit:${junit_version}"
	testImplementation "org.mockito:mockito-core:${mockito_version}"
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	// 다른 프로젝트의 logback.xml만 제외하고, 자신의 것은 포함
	exclude 'logback-test.xml'
	exclude 'logback-spring.xml'
}

shadowJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}