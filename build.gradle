plugins {
	id 'java'
	id 'application'
	id 'eclipse'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'etri'
version = '0.9.1'
mainClassName = 'mdt.cli.MDTCommandsMain'

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
	
	withSourcesJar()
	withJavadocJar()
}

sourceSets {
	main {
		java {
			srcDirs 'src/main/api'
			srcDirs 'src/main/impl'
		}
	}
}
	
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
dependencies {
	implementation project(":utils")

	// Guava (from the project :utils)
	implementation "com.google.guava:guava:${guava_version}"

	// Lombok (from the project :utils)
	compileOnly "org.projectlombok:lombok:${lombok_version}"
	annotationProcessor "org.projectlombok:lombok:${lombok_version}"

	// logback with SLF4j (from the project :utils)
	implementation "ch.qos.logback:logback-classic:${logback_version}"
	
	// Apache libraries
	implementation "org.apache.commons:commons-text:${commons_text_version}"
	implementation 'org.apache.poi:poi:5.3.0'
	
	
	// AAS model
	implementation "org.eclipse.digitaltwin.aas4j:aas4j-dataformat-json:${aas4j_version}"
	implementation "org.eclipse.digitaltwin.aas4j:aas4j-dataformat-aasx:${aas4j_version}"
	implementation "org.eclipse.digitaltwin.aas4j:aas4j-dataformat-parent:${aas4j_version}"
	
	implementation "commons-beanutils:commons-beanutils:${commons_beanutils_version}"
		
	// HTTP Client
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: "${okhttp_version}"
	
	// jackson 
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
	implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"
	
	// Tika
//	implementation "org.apache.tika:tika-parsers-standard-package:${tika_version}"
	implementation "org.apache.tika:tika-core:${tika_version}"

	// JSLT2
	implementation "com.github.tonysparks.jslt2:jslt2:${jslt2_version}"
		
	// picocli command line parser
	implementation "info.picocli:picocli:${picocli_version}"
	
	// MQTT
	implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${paho_version}"
	
	implementation "org.nocrala.tools.texttablefmt:text-table-formatter:${text_table_version}"
	implementation "org.barfuin.texttree:text-tree:${text_tree_version}"
}

task sourceJar(type: Jar) {
	from sourceSets.main.allSource
}

test {
	useJUnitPlatform()
}

 javadoc {
 	options.encoding = 'UTF-8'
 	options.links("https://docs.oracle.com/javase/8/docs/api/")
 	options.links("https://google.github.io/guava/releases/23.0/api/docs/")
 	options.links("http://reactivex.io/RxJava/javadoc/")
	
 	options.addStringOption('Xdoclint:none', '-quiet')
 }

shadowJar {
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'build/classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
						def entry = values.first()
						if ( entry.kind == 'src' ) {
							entry.includes = []
							entry.excludes = []
						}
						int index = cp.entries.indexOf entry
						cp.entries.removeAll values
						cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.contains('/test/') ) {
							entry.output = 'build/test_classes'
						}
						else {
							entry.output = 'build/classes'
						}
					}
				}
			}
		}
	}
}