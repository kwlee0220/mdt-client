plugins {
	id 'java'
	id 'application'
	id 'eclipse'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'etri'
version = '1.0.0'
mainClassName = 'mdt.cli.MDTCommandsMain'

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
//	withSourcesJar()
//	withJavadocJar()
}

sourceSets {
	main {
		java {
			srcDirs 'src/main/api'
			srcDirs 'src/main/impl'
			srcDirs 'src/main/antlr'
			
			// .antlr 디렉토리를 명시적으로 제외
			// exclude '**/.antlr/**'
			// exclude '.antlr/**'
		}
	}
}

repositories {
    mavenLocal()
	maven {
		url "https://maven.aksw.org/repository/internal/"
		allowInsecureProtocol = true
	}
	mavenCentral()
}
	
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'
compileJava {
	options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
dependencies {
	implementation project(":utils")

	// Guava (from the project :utils)
	implementation "com.google.guava:guava:${guava_version}"
	
	// Checker framework
	implementation("org.checkerframework:checker:${checker_version}")

	// Lombok (from the project :utils)
	compileOnly "org.projectlombok:lombok:${lombok_version}"
	annotationProcessor "org.projectlombok:lombok:${lombok_version}"

	// logback with SLF4j (from the project :utils)
	implementation "ch.qos.logback:logback-classic:${logback_version}"
	
	// Apache libraries
	implementation "org.apache.commons:commons-text:${commons_text_version}"
	
	// Spring boot
	implementation "org.springframework.boot:spring-boot-starter-web:${spring_boot_version}"
	
	// AAS model
	implementation "org.eclipse.digitaltwin.aas4j:aas4j-dataformat-json:${aas4j_version}"
	implementation "org.eclipse.digitaltwin.aas4j:aas4j-dataformat-aasx:${aas4j_version}"
	implementation "org.eclipse.digitaltwin.aas4j:aas4j-dataformat-parent:${aas4j_version}"
	
	implementation ("commons-beanutils:commons-beanutils:${commons_beanutils_version}") {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
		
	// HTTP Client
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: "${okhttp_version}"
	
	// jackson 
	implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
	implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"
	
	// Tika
//	implementation "org.apache.tika:tika-parsers-standard-package:${tika_version}"
	implementation "org.apache.tika:tika-core:${tika_version}"

	// JSLT2
	implementation "com.github.tonysparks.jslt2:jslt2:${jslt2_version}"
		
	// picocli command line parser
	implementation "info.picocli:picocli:${picocli_version}"
	annotationProcessor "info.picocli:picocli-codegen:${picocli_version}"
//	implementation "info.picocli:picocli-shell-jline3:${picocli_version}"
	implementation "org.fusesource.jansi:jansi:${jansi_version}"
	
	// MQTT
	implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:${paho_version}"
	
	// Antlr
	// antlr "org.antlr:antlr4:${antlr_version}"
	implementation "org.antlr:antlr4-runtime:${antlr_version}"
	
	implementation "org.nocrala.tools.texttablefmt:text-table-formatter:${text_table_version}"
	implementation "org.barfuin.texttree:text-tree:${text_tree_version}"
	
	testImplementation "junit:junit:${junit_version}"
	testImplementation "org.mockito:mockito-core:${mockito_version}"
}

//task sourceJar(type: Jar) {
//	from sourceSets.main.allSource
//}

test {
	useJUnitPlatform()
}

shadowJar {
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'build/classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
						def entry = values.first()
						if ( entry.kind == 'src' ) {
							entry.includes = []
							entry.excludes = []
						}
						int index = cp.entries.indexOf entry
						cp.entries.removeAll values
						cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.contains('/test/') ) {
							entry.output = 'build/test_classes'
						}
						else {
							entry.output = 'build/classes'
						}
					}
				}
			}
		}
	}
}