#!/usr/bin/env bash
#
# mdt Bash Completion
# =======================
#
# Bash completion support for the `mdt` command,
# generated by [picocli](https://picocli.info/) version 4.7.6.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `mdt [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'mdt (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# compReplyArray generates a list of completion suggestions based on an array, ensuring all values are properly escaped.
#
# compReplyArray takes a single parameter: the array of options to be displayed
#
# The output is echoed to std_out, one option per line.
#
# Example usage:
# local options=("foo", "bar", "baz")
# local IFS=$'\n'
# COMPREPLY=($(compReplyArray "${options[@]}"))
function compReplyArray() {
  declare -a options
  options=("$@")
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local i
  local quoted
  local optionList=()

  for (( i=0; i<${#options[@]}; i++ )); do
    # Double escape, since we want escaped values, but compgen -W expands the argument
    printf -v quoted %q "${options[i]}"
    quoted=\'${quoted//\'/\'\\\'\'}\'

    optionList[i]=$quoted
  done

  # We also have to add another round of escaping to $curr_word.
  curr_word=${curr_word//\\/\\\\}
  curr_word=${curr_word//\'/\\\'}

  # Actually generate completions.
  local IFS=$'\n'
  echo -e "$(compgen -W "${optionList[*]}" -- "$curr_word")"
}

# Bash completion entry point function.
# _complete_mdt finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_mdt() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} list" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} get" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} add" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} remove" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} start" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} stop" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} shutdown" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} instance" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aas" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} submodel" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} property" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ksx9101" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow" ];    then _picocli_mdt; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} instance list" ];    then _picocli_mdt_instance; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} instance get" ];    then _picocli_mdt_instance; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} instance add" ];    then _picocli_mdt_instance; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} instance remove" ];    then _picocli_mdt_instance; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} instance start" ];    then _picocli_mdt_instance; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} instance stop" ];    then _picocli_mdt_instance; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aas aas" ];    then _picocli_mdt_aas; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} aas get" ];    then _picocli_mdt_aas; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} submodel list" ];    then _picocli_mdt_submodel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} submodel submodel" ];    then _picocli_mdt_submodel; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} property get" ];    then _picocli_mdt_property; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} ksx9101 ksx9101" ];    then _picocli_mdt_ksx9101; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow list" ];    then _picocli_mdt_workflow; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow get" ];    then _picocli_mdt_workflow; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow add" ];    then _picocli_mdt_workflow; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow remove" ];    then _picocli_mdt_workflow; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} workflow convert" ];    then _picocli_mdt_workflow; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(list)
  local cmds1=(get)
  local cmds2=(add)
  local cmds3=(remove)
  local cmds4=(start)
  local cmds5=(stop)
  local cmds6=(shutdown)
  local cmds7=(instance)
  local cmds8=(aas)
  local cmds9=(submodel)
  local cmds10=(property)
  local cmds11=(ksx9101)
  local cmds12=(workflow)
  local cmds13=(instance list)
  local cmds14=(instance get)
  local cmds15=(instance add)
  local cmds16=(instance remove)
  local cmds17=(instance start)
  local cmds18=(instance stop)
  local cmds19=(aas aas)
  local cmds20=(aas get)
  local cmds21=(submodel list)
  local cmds22=(submodel submodel)
  local cmds23=(property get)
  local cmds24=(ksx9101 ksx9101)
  local cmds25=(workflow list)
  local cmds26=(workflow get)
  local cmds27=(workflow add)
  local cmds28=(workflow remove)
  local cmds29=(workflow convert)

  if CompWordsContainsArray "${cmds29[@]}"; then _picocli_mdt_workflow_convert; return $?; fi
  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_mdt_workflow_remove; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_mdt_workflow_add; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_mdt_workflow_get; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_mdt_workflow_list; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_mdt_ksx9101_ksx9101; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_mdt_property_get; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_mdt_submodel_submodel; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_mdt_submodel_list; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_mdt_aas_get; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_mdt_aas_aas; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_mdt_instance_stop; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_mdt_instance_start; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_mdt_instance_remove; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_mdt_instance_add; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_mdt_instance_get; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_mdt_instance_list; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_mdt_workflow; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_mdt_ksx9101; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_mdt_property; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_mdt_submodel; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_mdt_aas; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_mdt_instance; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_mdt_shutdown; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_mdt_stop; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_mdt_start; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_mdt_remove; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_mdt_add; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_mdt_get; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_mdt_list; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_mdt; return $?;
}

# Generates completions for the options and subcommands of the `mdt` command.
function _picocli_mdt() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="list get add remove start stop shutdown instance aas submodel property ksx9101 workflow"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_mdt_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h --long -l --table -t"
  local arg_opts="--home --endpoint --logger --filter -f --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --filter|-f)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_mdt_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h"
  local arg_opts="--home --endpoint --logger --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_mdt_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h"
  local arg_opts="--home --endpoint --logger --type -t --jar --image --model -m --conf -c"
  local type_option_args=("JAR" "DOCKER" "KUBERNETES") # --type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --type|-t)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --jar)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --image)
      return
      ;;
    --model|-m)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --conf|-c)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove` subcommand.
function _picocli_mdt_remove() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h --all -a"
  local arg_opts="--home --endpoint --logger"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_mdt_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h --nowait -v -vv"
  local arg_opts="--home --endpoint --logger --poll --timeout"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --poll)
      return
      ;;
    --timeout)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `stop` subcommand.
function _picocli_mdt_stop() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h --all -a --nowait -v"
  local arg_opts="--home --endpoint --logger"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `shutdown` subcommand.
function _picocli_mdt_shutdown() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h"
  local arg_opts="--home --endpoint --logger"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `instance` subcommand.
function _picocli_mdt_instance() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="list get add remove start stop"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `aas` subcommand.
function _picocli_mdt_aas() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="aas get"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `submodel` subcommand.
function _picocli_mdt_submodel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="list submodel"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `property` subcommand.
function _picocli_mdt_property() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="get"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ksx9101` subcommand.
function _picocli_mdt_ksx9101() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="ksx9101"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `workflow` subcommand.
function _picocli_mdt_workflow() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="list get add remove convert"
  local flag_opts="--help -h"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_mdt_instance_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h --long -l --table -t"
  local arg_opts="--home --endpoint --logger --filter -f --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --filter|-f)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_mdt_instance_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h"
  local arg_opts="--home --endpoint --logger --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_mdt_instance_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h"
  local arg_opts="--home --endpoint --logger --type -t --jar --image --model -m --conf -c"
  local type_option_args=("JAR" "DOCKER" "KUBERNETES") # --type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --type|-t)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${type_option_args[@]}" ) )
      return $?
      ;;
    --jar)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --image)
      return
      ;;
    --model|-m)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --conf|-c)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove` subcommand.
function _picocli_mdt_instance_remove() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h --all -a"
  local arg_opts="--home --endpoint --logger"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `start` subcommand.
function _picocli_mdt_instance_start() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h --nowait -v -vv"
  local arg_opts="--home --endpoint --logger --poll --timeout"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --poll)
      return
      ;;
    --timeout)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `stop` subcommand.
function _picocli_mdt_instance_stop() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h --all -a --nowait -v"
  local arg_opts="--home --endpoint --logger"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `aas` subcommand.
function _picocli_mdt_aas_aas() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h -l --table -t"
  local arg_opts="--home --endpoint --logger"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_mdt_aas_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h"
  local arg_opts="--home --endpoint --logger --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_mdt_submodel_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h -l --table -t"
  local arg_opts="--home --endpoint --logger"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `submodel` subcommand.
function _picocli_mdt_submodel_submodel() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h"
  local arg_opts="--home --endpoint --logger --id --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --id)
      return
      ;;
    --output|-o)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_mdt_property_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h"
  local arg_opts="--home --endpoint --logger --output -o --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --output|-o)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `ksx9101` subcommand.
function _picocli_mdt_ksx9101_ksx9101() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h"
  local arg_opts="--home --endpoint --logger --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_mdt_workflow_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h --table -t"
  local arg_opts="--home --endpoint --logger --repeat -r"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --repeat|-r)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_mdt_workflow_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h"
  local arg_opts="--home --endpoint --logger --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_mdt_workflow_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h --force -f"
  local arg_opts="--home --endpoint --logger"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local currIndex
    currIndex=$(currentPositionalIndex "add" "${arg_opts}" "${flag_opts}")
    if (( currIndex >= 0 && currIndex <= 0 )); then
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      positionals=$( compgen -f -- "${curr_word}" ) # files
    fi
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove` subcommand.
function _picocli_mdt_workflow_remove() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h"
  local arg_opts="--home --endpoint --logger"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `convert` subcommand.
function _picocli_mdt_workflow_convert() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -h"
  local arg_opts="--home --endpoint --logger --output -o"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --home)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --endpoint)
      return
      ;;
    --logger)
      return
      ;;
    --output|-o)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `mdt`, `mdt.sh`, and `mdt.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_mdt` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_mdt -o default mdt mdt.sh mdt.bash
